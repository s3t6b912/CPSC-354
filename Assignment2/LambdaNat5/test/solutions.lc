let rec member = \ elem. \ list.
    if elem=(hd list) then 1 else
        if (hd list)=# then 0
            else member elem (tl list)
in
member 1 2:3:1:#

;;

let rec remove = \ elem. \ list.
    if (tl list)=# then ((tl elem) : #) else
        if (hd elem)=(hd list) then ((tl elem) : (tl list))
            else remove (elem : (hd list)) (tl list)
in
remove 2 1:2:3:1:2:3:#

;;

let rec sum = \ list.
    if (tl list)=# then (hd list)
        else sum (((hd list)+(hd(tl list))) : (tl(tl list)))
in
sum 1:2:3:4:#

;;

let rec prod = \ list.
    if (tl list)=# then (hd list)
        else prod (((hd list)*(hd(tl list))) : (tl(tl list)))
in
prod 1:2:3:4:#
