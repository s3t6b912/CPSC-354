let rec member = \ elem. \ list.
    if elem=(hd list) then 1 else
        if (hd list)=# then 0
            else member elem (tl list)
in
member 1 2:3:1:#

;;

let rec remove = \ elem. \ list.
    if (hd list)=# then # else
        if elem=(hd list) then (tl list)
            else (hd list) : (remove elem (tl list))
in
remove 2 1:2:3:1:2:3:#

;;

let rec sum = \ list.
    if (tl list)=# then (hd list)
        else sum (((hd list)+(hd(tl list))) : (tl(tl list)))
in
sum 1:2:3:4:#

;;

let rec prod = \ list.
    if (tl list)=# then (hd list)
        else prod (((hd list)*(hd(tl list))) : (tl(tl list)))
in
prod 1:2:3:4:#

;;

let plus_two = \ num.
    num+2
in
let rec map = \ plus_two. \ list.
    if (hd list)=# then #
        else (plus_two (hd list)) : (map (plus_two) (tl list))
in
map plus_two 1:2:3:4:#

;;

let rec insert = \ elem. \ list.
    if (elem less_equal (hd list)) then (elem : list) else
        (hd list) : (insert elem (tl list))
in
let rec sort = \ list.
    if (hd list)=# then # else
        
